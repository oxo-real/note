
# INSTALLATION
================================================================================
# kvm
[KVM - ArchWiki](https://wiki.archlinux.org/title/KVM)

## check if bios has virtualization enabled

% LC_ALL=C lscpu | grep Virtualization
Virtualization:                  VT-x
OR
% grep -E -c '(vmx|svm)' /proc/cpuinfo
32
if not; change settings in bios setup

## check kernel support
% zgrep CONFIG_KVM /proc/config.gz
% lsmod | grep kvm


================================================================================
# qemu
[QEMU - ArchWiki](https://wiki.archlinux.org/title/QEMU)

## install qemu
yay -S qemu-full


================================================================================
# libvirt & libvirt client
[Virtual Machine Manager](https://virt-manager.org/)
[libvirt - ArchWiki](https://wiki.archlinux.org/title/Libvirt#Installation)

## graphical frontend for qemu
20230317 iptables-nft instead of ebtables (https://wiki.archlinux.org/title/Libvirt#Client)

## server side
yay -S libvirt
### networking
yay -S iptables-nft dnsmasq

## client side
yay -S virt-manager

# user interface for interacting with the graphical display of virtualized guest OS
yay -S virt-viewer

# cli tool for creating new KVM container guest using the libvirt hypervisor
yay -S virt-install


# CONFIGURATION
================================================================================
# libvirt
[libvirt - ArchWiki](https://wiki.archlinux.org/title/Libvirt#Configuration)

## reboot
after installation reboot

## authentication
### via user group
sudo usermod -a -G kvm,libvirt $USER

## if custom pool storage location (not: /var/lib/libvirt/images)
## then edit user and group privileges in qemu.conf manually or:
sudo cp $XDG_CONFIG_HOME/libvirt/qemu.conf /etc/libvirt/qemu.conf


# RUNNING
================================================================================
## starting the daemon
sudo systemctl start libvirtd.service
sudo systemctl start virtlogd.service

## run the virtual machine manager
virt-manager


# CREATE VMs
================================================================================

virt-manager > qemu/kvm > detail > storage


sharing storage locations:
vm > open > memory > details > enable shared memory
     	  > add hardware > filesystem > details
	    		   	      > drivervirtio-9p
	    		   	      > source path (browse local)
	    		   	      > target path i.e.: oxo
	    		   	      > readonly mount
xml i.e.:
<filesystem type="mount" accessmode="mapped">
  <source dir="/home/oxo"/>
  <target dir="oxo"/>
  <readonly/>
</filesystem>


# TROUBLESHOOTING
================================================================================

## network default not active
"Error starting domain: Requested operation is not valid: network 'default' is not active"
[How to fix "network 'default' is not active" error in libvirt](https://www.xmodulo.com/network-default-is-not-active.html)
When you install QEMU/KVM in Linux, the default NAT network is created automatically by libvirtd daemon.
The properties of the default network are defined in the libvirt's default network template (located at /etc/libvirt/qemu/networks/default.xml).
This default network is used to interconnect guest VMs's virtual NICs in NAT mode.

If, for whatever reason, the default network is deactivated, you won't be able to start any guest VMs which are configured to use the network.

When you check the state of existing networks, you will see inactive state for the default network.

$ sudo virsh net-list --all

Here we show how to solve the default network stuck in inactive state.

Solution One
Your first attempt can be simply trying to start the network with virsh.

$ sudo virsh net-start default
If you encounter the following error, go to the next solution.

internal error: Network is already in use by interface virbr0
Solution Two
Identify the name of the bridge associated with the default network. You can find out the bridge name in the default network template (/etc/libvirt/qemu/networks/default.xml). In most cases, the bridge name is virbr0.

Remove that bridge as follows.

$ sudo ifconfig virbr0 down
$ sudo brctl delbr virbr0
Now start the default network using virsh command.

$ sudo virsh net-start default
This will automatically re-create the virbr0 bridge.


Verify the state of the default network.

$ sudo virsh net-list --all


## Unable to create snapshots
Error creating snapshot: Operation not supported:
Internal snapshots of a VM with pflash based firmware are not supported.

If you get this message, change the OS loader type from pflash to rom.

  <os>
    <type arch="x86_64" machine="pc-q35-7.2">hvm</type>
    <loader readonly="yes" type="rom">/usr/share/edk2/x64/OVMF_CODE.fd</loader>
    <boot dev="hd"/>
  </os>

================================================================================
CAUTION! Data below is possibly deprecated!
================================================================================




[How To Install & Use QEMU/KVM/VirtManager in Linux | SETUP Virtual Machine With QEMU/KVM 2022 - Invidious](https://y.com.sb/watch?v=YUCDUPg9LFc)
bridge-utils libguestfs

iptables-nft bridge-utils dnsmasq libguestfs
# kvm qemu libvirt virt-manager



[QEMU/Images - Wikibooks, open books for an open world](https://en.wikibooks.org/wiki/QEMU/Images)












edk2-ovmf	# amd64 uef bios
edk2-armvirt	# arm64 uefi bios

sudo usermod -a -G kvm,libvirt $USER

# changing config

## user = "$USER"
sudo sed -i "s/^#user = "root"/user = \"$USER\"/" /etc/libvirt/qemu.conf
## group = "libvirt"
sudo sed -i 's/^#group = "root"/^group = "libvirt"/' /etc/libvirt/qemu.conf


sudo systemctl start libvirtd.service

virt-manager

#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# minimum setup


# install
yay -S qemu

# create file.img with disk image format qcow2 of $size bytes
qemu-img create -f qcow2 $file.img $size

# run vm
qemu-system-x86_64 \
-enable-kvm \
-cdrom $file.iso \
-boot menu=on \
-drive file=$file.img \
-m 4G \

## optional flags
# set cpu the same as host
-cpu host \
-smp cores=2,threads=2 \
-vga virtio -display sdl,gl=on \
-usb -device usb-host,hostbus=,hostaddress= \
-usb -device usb-host,vendorid=0x$vendid,productid=0x$prodid \
-bios edk2/ovmf/OVMF_CODE.fd
-rtc base=localtime
-hda $file.img
-host kvm=off \
-M q35 \

## keybindings
C-A-g	exit capture
C-A-f	fullscreen
