#: '\nmultiline\ncodeblock\n# '  ## switchable multiline codeblock / comment (remove first #)
< ${$(sh $XDG_DATA_HOME/git/code/tools/get_newest_file $XDG_LOGS_HOME/updater/$HOST/package_lists/)%?}Q  ## make last character of newest file a Q and print that file
< /dev/random tr -d -c "[:alnum:]" | head -c 32  ## translate random stream in 32 alnum (alphanumeric) character class characters (generate password)
< /dev/random tr -d -c "[:graph:]" | head -c 32  ## translate random stream in 32 graph (printable without spaces) character class characters (generate password)
<command> &> <file>  ## <command> stdout to <file>
<command> 2>&1 | tee -a logfile  ## <command> stderr to stdout, also append to logfile
<command> >/dev/null 2>&1  ## suppress all output from command
[SysRq] ([Alt]+[PrtScr]) reisub
amixer info  ## info about alsamixer device
amixer scontrols  ## list of alsamixer controls
amixer set Capture toggle	## alsamixer set
amixer set Capture volume 0 nocap
amixer set Internal Mic Capture volume 0 nocap
amixer set Master playback volume 30 unmute
apropos keyword  ## search man page names and descriptions
awk '!($1="")' <file>  ## remove column 1
basename <pathname>  ## print <pathname> without any leading directory components
bindkey  ## zsh bound keys
blkid /dev/sda128 | awk '{print $3}' | cut -d '"' -f 2  ## get uuid from /dev/sd
bluetoothctl connect $(bluetoothctl devices | fzf | awk '{print $2}') && bluetoothctl info  ## bluetooth connect
bluetoothctl disconnect $(bluetoothctl devices | fzf | awk '{print $2}') && bluetoothctl info  ## bluetooth disconnect
bluetoothctl discoverable off	## bluetooth don't broadcast radio device
bluetoothctl power off && sudo systemctl stop bluetooth.service && sudo rfkill block bluetooth  ## bluetooth radio off
cal -3 -m -w `date -I`  ## calendar showing last, current and next month
cal -y -m -w `date +%Y`	 ## current year calendar
case $expr in pattern1) statements ;; ptrn2) stmnt ;; *) stmnt ;; esac
cat $XDG_DATA_HOME/keys/wl/mn.wifi | grep #psk | awk -F "\"" '{print $2}' | qrencode -t utf8
cat -n <file>
cat /proc/sys/kernel/sysrq
cat /var/log/pacman.log
cat <file_sort_freq> | cut -c 8- > <file_rm_freq>	##
cat >> file << EOF; multi_line_text; EOF  ## append to here document
cat file | wl-copy	## copy file content to clipboard
cd "$(fd -t d -H -I . $HOME | fzf --preview="tree -L 1 {}" --bind="space:toggle-preview" --preview-window=:hidden)"  ## cd with fzf from $HOME, spacebar for info box
cd /usr/lib/modules/$(uname -r)
cd /var/lib/pacman/local  ## pacman 'install' directory
chown -R user:group directory	## recursive set user & group ownership
chown :group file	## set group ownership
chown user: file	## set user ownership
cp -p  ## copy and preserve mode, ownership and timestamps
cryptsetup ---cipher=aes-xts-plain64 -hash=sha512 --key-size=512 --offset=0 --verify-passphrase open --type=plain /dev/sdX lvm
cryptsetup ---cipher=aes-xts-plain64 -hash=sha512 --key-size=512 --offset=0 key-file=/dev/sdZ open --type=plain /dev/sdX lvm
cryptsetup ---cipher=serpent-xts-plain -hash=sha512 --key-size=512 --iter-time=4096 --use-random --verify-passphrase luksFormat /dev/sdX
cryptsetup luksAddKey --key-slot 7 file  ## add luks key to slot 7 for container file
cryptsetup luksUUID <luks_container> | wl-copy -o -n  ## get luks container id
cryptsetup open /dev/sdX cryptroot
ctags -R ~/.
curl $(wl-paste) | zathura -  ## stream a copied (qb ;y) pdf url
curl -4 https://ident.me	## external ip address
curl -O https://mirror.i3d.net/pub/archlinux/iso/2018.04.01/archlinux-2018.04.01-x86_64.iso | sudo dd of=/dev/sdX	## download arch linux iso and write to device
date && sudo hwclock --show --verbose  ## read hardware clock time and its drift
date +%s  ## epoch current date
date -d @1234567890 +%Y%m%d_%H%M%S_%N_%z_%Z_%V	## convert epoch to date time
date -u  ## current zulu time
dd if=/dev/sdX of=/dev/sdY bs=4M status=progress oflag=sync	## dd copy sdX to sdY
df -h	## file system information human-readable
dhcpcd -k wlp58s0  ## dhcp remove interface ip
dhcpcd wlp58s0	## dhcp request for interface
diff -Naur <lf> <rf> > patch_file  ## recursive diff from lf to rf with 3 lines of context (unified)
dig -x 89.39.107.195  ## reverse lookup own public ip
dirname <filename>  ## print <filename> without last component
du -sbh <directory>  ## total size of all content in directory
e2label /dev/X [label]  ## read [/rewrite] device label
echo "obase=10; ibase=16; <0x>" | bc  ## hexadecimal to decimal conversion
echo "obase=16; ibase=10; <0d>" | bc  ## decimal to hexadecimal conversion
echo -n $string | base64  ## base64 encoding
echo 0  ## print exit code of the last executed command
env  ## print current environment variables and their values
faillock --user $USER --reset  ## remove sudo lockout for current user
fc  ## edit last command in
fc -l -n -1  ## last command entered, hide line number
fc-list  ## list available fonts
fg [id]  ## recall suspended command to foreground
find . -exec <command> {} \;
find . -maxdepth 1 -name \*_ -type d -exec cp -r {} ~/test_/bu \;
find . -maxdepth 1 -type l -exec cp -d {} $HOME/.dot \;  ## find symlinks and copy without dereferencing
find . -name filename_start__\*
find . -print -exec cat {} \; -printf n
find . -type f ! -newermt "2018-12-31" -delet3	## find and delete all files older (not newer) than date
find . -type f -exec mv {} <dest> \;  ## find all files and move them to destination directory
find . -type l -exec sh -c "file -b {} | grep -q ^broken" \; -print
find . -xtype l -print
find ./ -maxdepth 1 -type f -mtime +1 -print
find / -iname file_case_insensitive
find /<directory> -name '<search-string>' 2>/dev/null
find /<directory> -type f -exec shred -v -z -n 3 -u {} \;
find . -maxdepth 1 -type d -exec du -sb {} \; | sort -g -k 1  ## directories sorted by size (bytes)
findmnt
for file in *; do cp -- "$file" "string_$file"; done  ## append string_ to each file in cwd
for i in {0..255}; do; printf "\x1b[38;5;${i}mcolour${i}\x1b[0m\n"; done  ## print 256 colors
for i in {0..7}; do; printf "\033[0;3${i}mcolor$i\n"; done  ## print 8 colors
free -m  ## free and used memory in system
fuser -vmM <file(system)>	## display PIDs using file / file(system) (filesystem in mount)
getent ahosts <url>  ## get ip address from name service switch library database ahost
git log --oneline  ## list of commits
git reset --hard 2db93df  ## back to a previous commit
glances
gpg --armor --export ID > ID.puk.gpg  ## export public key ascii armored id
gpg --edit-key ID >  ## edit public key
gpg --export ID > ID.puk.gpg  ## export public key binary
gpg --gen-key  ## generate new keypair
gpg --import ID >  ## import public key
gpg --list-keys | grep ^uid | sed s'/  //g' | fzf | awk '{print $NF}' | sed 's/<//' | sed 's/>//' | xargs -I {} sh -c "gpg --list-keys | grep -B 1 {}" | head -n 1 | awk -F = '{print $2}' | sed ':a;N;$!ba;s/\n//g' | sed 's/ //g' | sed 's/\r$//g'  ## get fingerprint from fzf uid list
gpg --output ID.puk.asc --armor --export ID >  ## export public key ascii armored
gpg --output file --decrypt file.gpg >  ## decrypt file.gpg asymmetricly using private key
gpg --output file.gpg --encrypt --recipient ID file >  ## encrypt file asymmetricly using public key ID
gpg --output file.gpg --symmetric file >  ## encrypt file symmetricly
gpg --output revoke.asc --gen-revoke ID  ## generate revocation certificate
gpg -vv public_key.asc
gpg-connect-agent reloadagent /bye  ## clear passphrases gpg cache
grep "\sro[\s,]" /proc/mounts
grep -riIl 'text' [directory]  ## find files (no binary) containing text recursively in directory
grep -riIn 'text' [directory]  ## find files (no binary) containing text recursively in directory with linenumbers
history -d <history_id>
history -t +%Y%m%d_%H%M%S
hmac=$(printf $input | openssl dgst -sha512 -hmac $input | sed 's/^.*= //')  ## zz2
host -t A <ip_addr/domain>  # dns lookup A record
host -v -t ANY <ip_addr/domain>  ## dns lookup any type verbose output
id -gn [$USER] ## show effective group name
iftop -i <interface> ## display bandwith usage of interface
info  ## advanced manual system primarily for gnu programs
insmod <filename> [args]  ## for mods not in /usr/lib/modules/$(uname -r)
ip a add 192.168.1.200/255.255.255.0 dev <interface>	## assign ip address to interface
ip a add <ip>/<subnet_mask> broadcast <broadcast_ip> dev <interface>
ip a del 192.168.1.200/24 dev <interface>	## remove ip address from interface
ip a flush <interface>	## remove all ip addresses from interface
ip a flush wlp58s0
ip link set <interface> {down/up}	## change interface state
ip link set dev [interface] address [mac]  ## assign [mac] address to [interface]
ip link set dev [interface] down  ## disconnect from the network by disable interface
ip n show	## show neighbour / arp cache
ip route add default via <default_gateway>
ip route flush dev <interface>
ipset add blocklist [ipaddrs]  ## add [ipaddrs] to blocklist
ipset create blocklist hash:ip  ## create ip blocklist
journalctl --list-boots
journalctl --vacuum-size=500M
journalctl -b, --boot[ID]
journalctl -e
journalctl -f, --follow
journalctl -k
journalctl -o json-pretty
journalctl -o verbose
journalctl -p 3 -x
journalctl -u <unit>
journalctl _<tab>
kill $(pidof <process_name>)
ln -s <path> <name>  ## create symlink <name> to <path>
ls $XDG_DATA_HOME/keys/wl | fzf | xargs -r cat | grep #psk | awk -F "\"" '{print $2}' | qrencode -t utf8  ## fzf select wifi key and show qr
lsblk -i --tree -o name,fstype,uuid,path,size,fsuse%,fsused,label,mountpoint
lsmod  ## list drivers currently added to kernel
lsof +f -- [path/1 path/2]  ## list open files in paths opened by processes
lsof -p [PID]  ## list open files for PID
lspci -k -d #[<vendor>]:[<device>][:<class>]
lspci -k -s <xx:xx.x> #[[[[<domain>]:]<bus>]:][<slot>][.[<func>]]
lspci -kvvt
lspci -vv  ## list pci devices, find kernel drivers
man -k . | fzf | awk '{print $1}' | xargs -r man  ## fzf find and open manpage
man zshall  ## view the system reference manual for all zsh
metar get
metar set eham
mkdir /dock/<1-4>
modprobe -r <driver>  ## remove driver from kernel
modprobe <driver>  ## add driver to kernel
mount -o uid=cytopyge,gid=wheel /dev/sdX dock/1  ## mount as user
mount -o remount,rw /dev/sdY1 /boot  ## remount rw existing mountpoint
mount -t tmpfs tmpfs /mnt/ramdisk -o size=4096  ## create ramdisk
mount | grep ro,  ## find all ro mountpoints
mpv --start=+00:00 --ytdl-format='best[filesize<300M]' --profile=cache_xs --demuxer-cache-wait --msg-level=all=v --http-header-fields="User-Agent: $(head -n 1 $USER_AGENT)" $(wl-paste) ## stream movie verbose with mpv.conf cache_s profile
mpv `echo $url | sed 's/https:\/\/www.youtube.com\/watch?v=/https:\/\/youtu.be\//'`  ## change yt url
msgcat --color=test
mv -t <target_dir> <source_dirs>  ## move source_dirs to target_dir
notmuch address '*'  ## all mail addresses
openssl enc -d -base64 -aes-256-gcm -pbkdf2 -salt -in crypt.aes -out plain.txt  ## openssl base64 encoded aes 256 bits galois counter mode decryption
openssl enc -e -base64 -aes-256-gcm -pbkdf2 -salt -in plain.txt -out crypt.aes  ## openssl base64 encoded aes 256 bits galois counter mode encryption
openvpn --config openvpn/udp-ams1_udp.ovpn
output=$(printf $input | openssl dgst -sha512 -hmac $hmac | sed 's/^.*= //') ## zz3
pacman-key --delete <pub_key>
pacman-key --finger <pub_key>
pacman-key --lsign-key <pub_key>
pactree -r [package]  ## show [package] dependant tree, reverse depedencies, packages that depend on [package]
pactree <package>  ## show [package] dependency tree
patch -p0 < patch_file ##  apply patch_file (see diff)
pim2fa=$(printf $input | openssl dgst -sha512 -hmac pim2fa | sed 's/^.*= //') ## zz4
pim=$(printf $input | xxd -p)  ## zz4_OLD
ping -D -i 10 -c 5 9.9.9.9
pkill wpa_supplicant && sudo dhcpcd -k wlp58s0 && sudo pkill dhcpcd && sudo ip a flush wlp58s0
printf "$tring" | awk '{print $1+0}'  ## awk retrieves the second field as a number (+0) from $tring, anything after the number will be ignored
printf "%03d%s" "2"  ## print leading zeros
printf "%3d%s" "2"  ## print leading spaces
printf "Mime-Version: 1.0; Content-Type: text/plain; charset=us-ascii; Content-Transfer-Encoding: 7bit; Subject: <subject>\n; <body>" | msmtp -v -C <msmtp_config> -a <profile_name> -- destination@mail.com
printf "space_every_4th_char" | fold -w 4 | paste -sd ' ' -
printf "space_every_4th_char" | sed 's/.\{4\}/& /g'
printf $(( [#n] x ))  ## print base 10 value of x in base n, with 2<=n<=36
printf text | openssl dgst -sha512 -hmac key | sed 's/^.*= //' | wl-copy
ps -ajxf  ## print a process tree
ps -eFly  ## list every process on the system
ps -eo %cpu,%mem,pid,pgid,user,state,start,args= --sort=-etimes  ## list processes custom AIX format descriptors, sort low to high elapsed time since process was started
ps -eo %cpu,%mem,pid,user,command= --sort=-%cpu  ## list processes custom AIX format descriptors, sort high to low cpu usage
pstree -ptg  ## display a tree of processes, show PIDs, PGIDs and full names for threads
qrencode -t UTF8 <string>
qutebrowser -s content.canvas_reading true ## qb for windy
rankmirrors -n 10 /etc/pacman.d/mirrorlist | grep -w 'Server =' >> mirrorlist.ranked
rcvboxdrv
read input  ## zz1
read input; printf '%s' "$input" | base64 | wl-copy -n -o; unset input  ## input base64 translation
readlink <file>  ## print resolved symbolic links or canonical file names
readlink <symlink> | cut -d / -f 4- | awk -v home="$HOME/" '{print home $0}'  ## change symlink to current users $HOME
realpath file  ## return canonicalized absolute pathname
renice -19 $(pgrep <process_name>)  ## give <process_name> highest (-19) priority
rfkill  ## check hard and soft block status wireless radios
rfkill [un]block bluetooth  ## soft [un]block bluetooth radio
rfkill [un]block wlan  ## soft [un]block wifi radio
rm -rf -- '-r'
rmmod btusb
rsync -aAXv --delete --exclude-from=<exclude_list> <source> <destination>
rsync -aAXv --delete --stats --progress --info=progress2 --modify-window=1 --exclude-from=/home/cytopyge/.config/settings/rsync/parvus_exclude_list / /dock/1/parvus
rsync -aAXv --delete --stats --progress --info=progress2 --modify-window=1 --exclude-from=/home/cytopyge/settings_/rsync/parvus_exclude_list -e ssh / admin@192.168.3.199:/share/backup/devices/dellxps13
rsync -aAXv --delete <source> <destination>
sed ':a;N;$!ba;s/\n//g' | sed 's/ //g' | sed 's/\r$//g'  ## remove all spaces from string
sed -i "$(( $( wc -l < $HISTFILE ) -1 )),\$d" $HISTFILE  ## remove history last line
sed -i '$d' <file>  ## remove last line from <file>
sed -i '/pttrn/d' file  ## delete all lines in file that contain 'pttrn'
sed -i '2,$d' <file>  ## remove all lines from line 2 from <file>
sed -i '2,3 d' <file>  ## remove line 2 and 3 from <file>
sed -i 'ni insert this into line n of file' <file>
sed -i 's/<find>/<replace>/g' <file>  ## replace <find> with <replace> in <file>
sed -i -n -e :a -e '1,2!{P;N;D;};N;ba' <file>  ## remove last 2 lines from <file>
setfont ter-v32n
setopt interactive_comments  ## threat string after '#' as comment (unsetopt disables)
sh -xv file.sh  ## extra verbose debug output
showkey  ## [-a(scii), -s(cancodes), -k(eycodes)] examine codes sent by the keyboard
showkey -s
shred -v -z -n 3 -u <file>
sleep 3 && scrot -s
slurm -i <device>
sort $HISTFILE | uniq -c | sort -k1,1nr -k2 >> history_freq  ## create history frequency list
sort < <file> | sort -nr > <file_sort_freq>
sort < <file> | uniq -u > <file_uniq>
sort file | uniq -c | sort -k1,1nr -k2 | sed 's/^ *[0-9]* //' > file_freq_sort
split <file> -n N  ## split <file> into N files
ssh-keygen -R 192.168.0.195  ## remove cached key for ip on the local machine
ssh-keyscan -t ecdsa 192.168.x.y >> ~/.ssh/known_hosts  ## update ecdsa key for ip on local machine
stat -c %A <file>  ## display file access rights in human readable format
stat -c %a <file>  ## display file access rights in octal format
stat <file>  ## display file or file system status
stty -a  ## print all terminal line settings
sudo -k
sudo -l
sudo ip link set up && sudo dhcpcd  && ping -c 1 9.9.9.9 && ip a
sudo iptables -A INPUT -s [ipaddr] -j DROP  ## add [ipaddr] to chain INPUT and drop all traffic
sudo rfkill unblock bluetooth && pulseaudio --start && sudo systemctl start bluetooth.service && bluetoothctl power on && bluetoothctl discoverable off ## bluetooth radio on
sudo systemctl start sshd
swaymsg -t get_outputs
systemctl --failed
systemctl isolate graphical.target
systemctl isolate multi-user.target
systemctl list-unit-files
systemctl list-units
systemctl start vboxdrv vboxpci vboxnetadp vboxnetflt
systemd-analyze
tail -f /var/log/{messages,kernel,dmesg,syslog}
tar -cv[j/z]f <archive.tar> -C <subdir> <files>  ## create tar archive [bzip2/gzip compression (optional)] files in archive relative to <subdir>
tar -cv[j/z]f <archive.tar> <files>  ## create tar archive [bzip2/gzip compression (optional)]
tar -tvf <archive.tar>  ## print contents of tar archive
tar -xv[j/z]f <archive.tar>  ## extract tar archive [bzip2/gzip compression (optional)]
tmux attach-session -t 0
tmux show-options -g
tr -s " " < file_with_double_spaces > file_without_double_spaces  ## remove double spaces
ts .local/share
type command/file  ## determine type of command, file or function
uptime
usermod -a -G group_2_add user_2_add
vlock -a
watch -d -n 1 -t lsblk -i --tree -o name,fstype,uuid,path,size,fsuse%,fsused,label,mountpoint
watch -n 1 'ls -ilatr'
wev  ## show wayland events i.e. keypresses keynames
wget -rv -l 0 -nd http://proxpn.com/locations
which -a <command>  ## show path of all <command> (from $PATH)
while IFS= read -r pkg; do ls /var/cache/pacman/pkg | grep ^"$pkg"; done <<< "$(pacman -Qm | awk {print $1})" ## which package from Qm is in /v/c/p/p
while read -r -u $fd line_in_file; do <command> $line_in_file; done {fd}< <file>  ## loop through lines in file (with stdin redirection)
while read line_in_file; do <command> $line_in_file; done < <file>  ## loop through lines in file
whois -B 46.166.142.215  ## whois own public ip
wpa_supplicant -B -i wlp58s0 -c ~/keys/wl/mn.wifi
xargs -r command  ## run command with stdin as argument, no-run if empty
xxd -b -p <infile <outfile>> ## plain bits dump
xxd -p <infile <outfile>> ## plain hexdump
xxd -r -p <infile <outfile>> ## reverse plain hexdump
yay --gendb  ## generate developement package database
yay --show -w -w
yay -P  ## show (is a yay specific [no pacman] option)
yay -Ps && yay --show -w && yay -Syu && yay -Rns $(yay -Qtdq) && yay -c && paccache -rv
yay -Pw  ## show news
yay -Q  ## query package database; display installed packages with version (Q=Qd+Qe=Qm+Qn)
yay -Qc <file>	## query package database; display changelog <file>
yay -Qd  ## (--deps) query package database; display packages installed as dependencies
yay -Qdt  ## query package database; display unrequired deps
yay -Qe  ## (--explicit) query package database; display explicitly installed packages
yay -Qent  ## query package database; display explicitly installed (no dependencies), not required packages that are in the package database
yay -Qg <group>  ## query package database; display packages that are member of <group>
yay -Qi <package>  ## query package database; display package infoos that are member of <group>cman
yay -Qk <package>  ## query package database; display number of total and missing files, check that all files of the package are present on the system
yay -Ql <package>  ## query package database; display package file list
yay -Qm  ## (--foreign) query package database; display packages that are not in the sync database
yay -Qmq  ## (--foreign) query package database; display packages that are not in the sync database no version
yay -Qn  ## (--native) query package database; display packages that are in the sync database
yay -Qnq | yay -S -  ## reinstall native packages
yay -Qo <file>	## query package database; display which package owns <file>
yay -Qq ## query package database; display installed packages (raw)
yay -Qql <package>  ## query package database; display package file list (raw)
yay -R [package] OR [group]  ## remove [package] OR [group]
yay -Rns [package]  ## remove [package] including not required and not explicitly installed dependencies, no pacsave
yay -S [package]  ## synchronize package; download and install
yay -Sc [package]  ## remove all cached packages that are currently not installed (more agressive than paccache)
yay -Scc [package]  ## remove all cached packages (far more agressive than paccache, will prevent downgrading or reinstalling without downloading)
yay -Syu --devel --timeupdate  ## update, also check AUR developement packages (git), timeupdate (instead of version number)
yay -Tv  ## check dependencies; show file paths
yay -U <package>  ## remove then upgrade or add package
ykman opt static 2 -k US <string>  ## assign string to yk slot 2
zsh --no-rcs  ## zsh terminal without run command script
jobs  ## list background processes
fg [%n]  ## job [n] to foreground
gpg --fingerprint | grep -i -B 1 <uid/email> | head -n 1 | awk -F = '{print $2}' | sed ':a;N;$!ba;s/\n//g' | sed 's/ //g' | sed 's/\r$//g'  ## get gpg fingerprint w/o spaces from uid (email)
printf "%d\n" \'A  ## character (A) to ascii value (65)
printf "\x$(printf %x 65)"  ## ascii value (65) to character (A)
< /home/cytopyge/.config/qutebrowser/bookmark_urls | fzf | slicer '(' ')'  ## get from bookmark_urls
wl-paste >> /home/cytopyge/.config/qutebrowser/bookmark_urls  ## add to bookmark_urls
cd $XDG_CONFIG_HOME/shln; sh chln; cd .; cd -  ## change symlinks to $USER for $PATH
gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/default -dNOPAUSE -dQUIET -dBATCH -dDetectDuplicateImages -dCompressFonts=true -r150 -sOutputFile=out.pdf in1.pdf in2.pdf in3.pdf  ## concatenate pdf files
