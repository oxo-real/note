https://freedesktop.org/wiki/Software/systemd/Debugging/



Diagnosing Boot Problems

If your machine gets stuck during boot, first check if the hang happens before or after control passes to systemd.

Try to boot without rhgb and quiet on the kernel command line. If you see some messages like these:

    Welcome to Fedora VERSION (codename)!"
    Starting name...
    [ OK ] Started name.

then systemd is running. (See an actual screenshot.)

Debugging always gets easier if you can get a shell. If you do not get a login prompt, try switching to a different virtual terminal using CTRL+ALT+F__. Problems with a display server startup may manifest themselves as a missing login on tty1, but other VTs working.

If the boot stops without presenting you with a login on any virtual console, let it retry for up to 5 minutes before declaring it definitely stuck. There is a chance that a service that has trouble starting will be killed after this timeout and the boot will continue normally. Another possibility is that a device for an important mountpoint will fail to appear and you will be presented with emergency mode.
If You Get No Shell

If you get neither a normal login nor the emergency mode shell, you will need to do additional steps to get debugging information out of the machine.

    Try CTRL+ALT+DEL to reboot.
        If it does not reboot, mention it in your bugreport. Meanwhile force the reboot with SysRq or hard reset.
    When booting the next time, you will have to add some kernel command line arguments depending on which of the debugging strategies you choose from the following options.

Debug Logging to a Serial Console

If you have a hardware serial console available or if you are debugging in a virtual machine (e.g. using virt-manager you can switch your view to a serial console in the menu View -> Text Consoles or connect from the terminal using virsh console MACHINE), you can ask systemd to log lots of useful debugging information to it by booting with:

systemd.log_level=debug systemd.log_target=console console=ttyS0,38400 console=tty1

The above is useful if pid 1 is failing, but if a later but critical boot service is broken (such as networking), you can configure journald to forward to the console by using:

systemd.journald.forward_to_console=1 console=ttyS0,38400 console=tty1

console= can be specified multiple times, systemd will output to all of them.
Booting into Rescue or Emergency Targets

To boot directly into rescue target add systemd.unit=rescue.target or just 1 to the kernel command line. This target is useful if the problem occurs somewhere after the basic system is brought up, during the starting of "normal" services. If this is the case, you should be able to disable the bad service from here. If the rescue target will not boot either, the more minimal emergency target might.

To boot directly into emergency shell add systemd.unit=emergency.target or emergency to the kernel command line. Note that in the emergency shell you will have to remount the root filesystem read-write by yourself before editing any files:

mount -o remount,rw /

Common issues that can be resolved in the emergency shell are bad lines in /etc/fstab. After fixing /etc/fstab, run systemctl daemon-reload to let systemd refresh its view of it.

If not even the emergency target works, you can boot directly into a shell with init=/bin/sh. This may be necessary in case systemd itself or some libraries it depends on are damaged by filesystem corruption. You may need to reinstall working versions of the affected packages.

If init=/bin/sh does not work, you must boot from another medium.
Early Debug Shell

You can enable shell access to be available very early in the startup process to fall back on and diagnose systemd related boot up issues with various systemctl commands. Enable it using:

systemctl enable debug-shell.service

or by specifying

systemd.debug-shell=1

on the kernel command line.

Tip: If you find yourself in a situation where you cannot use systemctl to communicate with a running systemd (e.g. when setting this up from a different booted system), you can avoid communication with the manager by specifying --root=:

systemctl --root=/ enable debug-shell.service

Once enabled, the next time you boot you will be able to switch to tty9 using CTRL+ALT+F9 and have a root shell there available from an early point in the booting process. You can use the shell for checking the status of services, reading logs, looking for stuck jobs with systemctl list-jobs, etc.

Warning: Use this shell only for debugging! Do not forget to disable systemd-debug-shell.service after you've finished debugging your boot problems. Leaving the root shell always available would be a security risk.

It is also possible to alias kbrequest.target to debug-shell.service to start the debug shell on demand. This has the same security implications, but avoids running the shell always.
verify prerequisites

A (at least partly) populated /dev is required. Depending on your setup (e.g. on embedded systems), check that the Linux kernel config options CONFIG_DEVTMPFS and CONFIG_DEVTMPFS_MOUNT are set. Also support for cgroups and fanotify is recommended for a flawless operation, so check that the Linux kernel config options CONFIG_CGROUPS and CONFIG_FANOTIFY are set. The message "Failed to get D-Bus connection: No connection to service manager." during various systemctl operations is an indicator that these are missing.
If You Can Get a Shell

When you have systemd running to the extent that it can provide you with a shell, please use it to extract useful information for debugging. Boot with these parameters on the kernel command line:

systemd.log_level=debug systemd.log_target=kmsg log_buf_len=1M printk.devkmsg=on

in order to increase the verbosity of systemd, to let systemd write its logs to the kernel log buffer, to increase the size of the kernel log buffer, and to prevent the kernel from discarding messages. After reaching the shell, look at the log:

journalctl -b

When reporting a bug, pipe that to a file and attach it to the bug report.

To check for possibly stuck jobs use:

systemctl list-jobs

The jobs that are listed as "running" are the ones that must complete before the "waiting" ones will be allowed to start executing.
