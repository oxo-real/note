# gpg

## generate key pair
### for --expert functions see yubikey
gpg --full-generate-key

## generate passphrase
< /dev/random tr -d -c "[:graph:]" | head -c 32 | wl-copy

>>>

gpg: key F20A12F5C5A6A351 marked as ultimately trusted
gpg: directory '/home/user/.gnupg/openpgp-revocs.d' created
gpg: revocation certificate stored as '/home/user/.gnupg/openpgp-revocs.d/BCE2A64A2DEF8E906DFF20A12F5C5A6A351.rev'
public and secret key created and signed.

pub   rsa4096 2019-01-10 [SC] [expires: 2020-01-10]
      BCE2A64A2DEF8E906DFF20A12F5C5A6A351
uid                      user <user@protonmail.com>
sub   rsa4096 2019-01-10 [E] [expires: 2020-01-10]

<<<

## key ID
RFC4880
https://tools.ietf.org/html/rfc4880
in here is (section-12.2):
Fingerprint: BCE2A64A2DEF8E906DFF20A12F5C5A6A351
Long key ID:                    F20A12F5C5A6A351
Short key ID:                          5C5A6A351
ID's can be prefixed by 0x (which designates a hex value).

keyID can also be the emailaddress

### get fingerprint
gpg --fingerprint | grep -i -B 1 <uid/email> | head -n 1 | awk -F = '{print $2}' | sed ':a;N;$!ba;s/\n//g' | sed 's/ //g' | sed 's/\r$//g'  ## get gpg fingerprint w/o spaces from uid (email)

## generate revocation certificate
### from gpg 2.1 revoke certs are created upon key generation
gpg --gen-revoke ID > ID.revoke.asc


# get info

## list keys
### public
gpg --list-keys
gpg -k --with-keygrip

### private
gpg --list-secret-keys
gpg -K --with-keygrip

### signed keys
gpg --list-sigs


# export

## public key
### binary file
gpg --export ID > ID.puk.gpg
### ascii armored file
gpg --armor --export ID > ID.puk.asc


## private keys
## keep private (gpg: secret) keys always offline!
gpg --armor --export-secret-key $key_id > $key_id.prk.asc
## all
gpg --armor --export-secret-keys > priv_keys.prk.asc

## trustdb
gpg --export-ownertrust > otrust.txt


# import

## default location ~/.gnupg

## public keys
### from a file
gpg --import ID.puk.asc
### from a keyserver
gpg --recv-keys ID

### verify
gpg --list-public-keys
gpg --fingerprint ID

## private keys
gpg --import myprivatekeys.asc
gpg --edit-key ID trust quit

### verify
gpg --list-secret-keys

## trustdb
gpg --import-ownertrust otrust.txt


# test

## encryption
### TX signed (fingerprint) encrypted <file> for NAME_RX (receiver)
gpg -e -u NAME_TX -r NAME_RX <file>[.gpg]

## decryption
gpg -d <file>[.gpg]

## important user notice
decryption and signing will probably fail if the user that is running gpg
does not own the terminal in which gpg is running
Therefore: don't su over to the new user, but login directly via ssh or console!

## verification
### verify message from NA


# change expiration date

gpg --edit-key <key_id>

## in the gpg shell get a list of all the keys
list

## work on the (first) primary key
key 0

## or work on multiple subkeys at once
key 1
key 2
key 3

## set a new expiration period
expire

## save
save


# change passphrase
gpg --edit-key <key_id>
> passwd
> save


# gpg homedir
export GNUPGHOME='$XDG_CONFIG_HOME/gnupg/'
## set correct permissions
chown -R cytopyge $XDG_CONFIG_HOME/gnupg
find $XDG_CONFIG_HOME/gnupg -type f -exec chmod 600 {} \;
find $XDG_CONFIG_HOME/gnupg -type d -exec chmod 700 {} \;

The contents of $GNUPGHOME are:

openpgp-revocs.d: This subdirectory contains your revocation certificate. You'll need this if your private key ever becomes common knowledge or otherwise compromised. Your revocation certificate is used in the process of retiring your old keys and adopting new keys.
private-keys-v1.d: This subdirectory stores your private keys.
pubring.kbx: An encrypted file. It contains public keys, including yours, and some metadata about them.
pubring.kbx~: This is a backup copy of "pubring.kbx." It is updated just before changes are made to "pubring.kbx."
trustdb.gpg: This holds the trust relationships you have established for your own keys and for any accepted public keys belonging to other people.


# full gpg identity backup

## method 1; copy the entire gpg homedir
tar -cvzf gpg_backup.tar $GNUPGHOME

## method 2; more granulated
[How to Back Up and Restore Your GPG Keys on Linux]
(https://www.howtogeek.com/816878/how-to-back-up-and-restore-gpg-keys-on-linux/#the-gnupg-directory)

### backup - keys & trust-db
gpg --export --export-options backup --output keys-public.gpg
gpg --export-secret-keys --export-options backup --output keys-private.gpg
gpg --export-ownertrust > trust-db.gpg

### restore
gpg --import keys-public.gpg
gpg --import keys-private.gpg
gpg --import-ownertrust trust-db.gpg


# search online
gpg --keyserver hkp://keyserver.ubuntu.com --search-key 'a@b.com'
gpg --auto-key-locate keyserver --locate-keys a@b.com

[DEV_20200320]
% gpg --keyserver hkp://keys.openpgp.org --search-key 0x1063A72A10A3F036
gpg: data source: http://keys.openpgp.org:11371
(1)	  256 bit EDDSA key 0x1063A72A10A3F036, created: 2022-03-20
