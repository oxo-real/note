# verify authenticity

## browser has to have u2f support
https://www.yubico.com/genuine/


# verify entropy from
```
< /proc/sys/kernel/random/entropy_avail
```


# (optional) harden gpg configuration
gpg --options <gpg.conf>
```
grep -ve "^#" $GNUPGHOME/gpg.conf
```

personal-cipher-preferences AES256 AES192 AES
personal-digest-preferences SHA512 SHA384 SHA256
personal-compress-preferences ZLIB BZIP2 ZIP Uncompressed
default-preference-list SHA512 SHA384 SHA256 AES256 AES192 AES ZLIB BZIP2 ZIP Uncompressed
cert-digest-algo SHA512
s2k-digest-algo SHA512
s2k-cipher-algo AES256
charset utf-8
fixed-list-mode
no-comments
no-emit-version
keyid-format 0xlong
list-options show-uid-validity
verify-options show-uid-validity
with-fingerprint
require-cross-certification
no-symkey-cache
use-agent
throw-keyids
trust-model	tofu+pgp

tofu:	trust on first use
pgp:	web of trust and trust signatures (pgp5.x and later), which is the default trust model


# generate passphrase

gpg --gen-random --armor 0 24
OR
< /dev/random tr -d -c "[:alnum:]" | head -c 24


# generate gpg master key
```
gpg --expert --full-generate-key
```

## options
ECC curve 25519 (certify only)
no expiry date


# export key id
## for cli command convenience
```
export KEYID=0x<$KEYID>
```


# (optional) sign with existing key
```
gpg --export-secret-keys --armor --output <tmp_loc>

gpg --default-key $OLDKEYID --sign-key $KEYID
```


# add rotating subkeys
```
gpg --expert --edit-key $KEYID
```

## authentication key
	addkey 11
	ECC Curve 25519 (authenticate only)
	with expiry date

## encryption key
	addkey 12
	ECC Curve 25519 (encrypt only)
	with expiry date

## signing key
	addkey 10
	ECC Curve 25519 (sign only)
	with expiry date

## save keys
	save


# verify generated secret keys
## also shows keyring location
```
gpg -K
```


# (optional) add extra identities
```
gpg --expert --edit-key $KEYID
```

	adduid
	trust
	uid 1
	primary
	save


# export revocation certificate
```
gpg --gen-revoke $KEYID > revoke_$KEYID.asc
```


# export public key
## as binary file
```
gpg --export $KEYID > pub_$KEYID.pgp
```

## as ascii armored file
```
gpg --export --armor $KEYID > pub_$KEYID.asc
```


# import public key
## receive from keyserver
```
gpg --recv-keys 0x12345678
```

## import key from file
```
gpg --import file.gpg
```


# confirm key fingerprint
```
gpg --fingerprint 0x12345678
```


# remove key from keyring
```
gpg --delete-keys 0x12345678
```


# list all keys in keyring
```
gpg --list-keys
```

## keys that are signed by others
```
gpg --list-sigs
```


# signing files
## encrypt file with private key
## creates file.gpg
```
gpg --sign file
```

## detached signing
## creates file.sig
```
gpg --detach-sign file
```


# verify file
## file and file.sig in cwd
```
gpg --verify file.sig
```


